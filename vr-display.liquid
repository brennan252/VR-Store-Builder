<script>
// javascript functions
// Aframe Components

AFRAME.registerComponent('info-panel', {
  schema: {
    cartLink: { type: 'string', default: "http://www.aframe.io/" },
    storeLink: { type: 'string', default: "http://www.aframe.io/"},
  },
  init: function () {
    var buttonEls = document.querySelectorAll('.menu-button');
    var fadeBackgroundEl = this.fadeBackgroundEl = document.querySelector('#fadeBackground');
    this.currentID;
    this.movieImageEl;
    this.movieTitleEl = document.querySelector('#movieTitle');
    this.movieDescriptionEl = document.querySelector('#movieDescription');
    //this.cartCountEl = document.querySelector('#cartButtonText');
    //this.portal = document.querySelector('#linkPng');

    this.cart = {
      contents: [],
      count: 0
    };

    this.addToCartButton = document.querySelector('.add-to-cart-button')
    this.moreInfoButton = document.querySelector('.more-info-button');
    //this.viewCartButton = document.querySelector('.view-cart-button');
    //this.storeLogoButton = document.querySelector('.store-logo-button');


    this.onMenuButtonClick = this.onMenuButtonClick.bind(this);
    this.onBackgroundClick = this.onBackgroundClick.bind(this);
    this.onAddToCartClick = this.onAddToCartClick.bind(this);
    this.onInfoButtonClick = this.onInfoButtonClick.bind(this);
    //this.onViewCartButtonClick = this.onViewCartButtonClick.bind(this);
    //this.onStoreLogoButtonClick = this.onStoreLogoButtonClick.bind(this);

    this.backgroundEl = document.querySelector('#background');
    for (var i = 0; i < buttonEls.length; ++i) {
      buttonEls[i].addEventListener('click', this.onMenuButtonClick);
      //startingPosition = [buttonEls[i].object3D.position.x, buttonEls[i].object3D.position.y, buttonEls[i].object3D.position.z];
      //rotation = rotateToParallel(startingPosition, [0, 1.6, 0]);
      //buttonEls[i].object3D.rotation.y = rotation[1];//rotation[1]
    }
    this.backgroundEl.addEventListener('click', this.onBackgroundClick);
    this.addToCartButton.addEventListener('click', this.onAddToCartClick);
    this.moreInfoButton.addEventListener('click', this.onInfoButtonClick);
    //this.viewCartButton.addEventListener('click', this.onViewCartButtonClick);
    //this.storeLogoButton.addEventListener('click', this.onStoreLogoButtonClick);

    this.el.object3D.renderOrder = 8;
    this.el.object3D.depthTest = true;
    fadeBackgroundEl.object3D.renderOrder = 9;
    fadeBackgroundEl.getObject3D('mesh').material.depthTest = true;

    var items = { {% for block in section.blocks %} {% assign vr_item_id  = block.settings.vr_product | replace: ' ', '-' | camelcase %}{{ vr_item_id | append: 'Button'}}: {
        title: '{{ block.settings.item_card_title | capitalize }}',
        imgEl: document.querySelector('{{ '#' | append: vr_item_id | append: 'MovieImage' }}'),
        description: '{{ block.settings.item_card_description | truncate: 140 }}',
        id: '{{ all_products[block.settings.vr_product].id  }}',
        variant: '{{ all_products[block.settings.vr_product].variants.first.id  }}' ,
        itemSite: '{{ shop_locale.root_url | append: all_products[block.settings.vr_product].url  }}' },
        {% endfor %}
    };
    this.movieInfo = items;
  },

  onMenuButtonClick: function (evt) {
    var movieInfo = this.movieInfo[evt.currentTarget.id];
    this.currentID = evt.currentTarget.id;

    this.backgroundEl.object3D.scale.set(1, 1, 1);

    this.el.object3D.scale.set(1, 1, 1);
    if (AFRAME.utils.device.isMobile()) { 
      //this.el.object3D.scale.set(1.4, 1.4, 1.4); 
    }
    this.el.object3D.visible = true;
    this.fadeBackgroundEl.object3D.visible = true;


    if (this.movieImageEl) { this.movieImageEl.object3D.visible = false; }
    this.movieImageEl = movieInfo.imgEl;
    this.movieImageEl.object3D.visible = true;

    var buttonEls = document.querySelectorAll('.menu-button');

    for (var i = 0; i < buttonEls.length; ++i) {
      buttonEls[i].object3D.visible = false;
    }

    this.movieTitleEl.setAttribute('text', 'value', movieInfo.title);
    this.movieDescriptionEl.setAttribute('text', 'value', movieInfo.description);
  },

  // Post item id to cart
  onAddToCartClick: function (evt) {
 
  var itemID = this.movieInfo[this.currentID].id;
	var variantID = this.movieInfo[this.currentID].variant;
    
    var formData = {
      "items": [{
        'id': Number(variantID),
        'quantity': 1
      }]
    };

    fetch('{{ routes.cart_add_url }}', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(formData)
    })
      .then(res => {
  		 // update elements to indicate 
        fetch('/cart.js')
              .then(response => response.json())
              .then(data => { 
                if(data.item_count > 0){
  				        // add red dot to cart indicator
					        var empty_cart_icon = document.querySelector('.site-header__cart-indicator');
  					      empty_cart_icon.classList.remove('hide');
  
                  // show notificaiton--success banner bar
                  var success_el = document.querySelector('.item-added-icon');
  				        success_el.object3D.visible = true;
                  setTimeout(function(){
                    success_el.object3D.visible = false;
                  }, 1000); 
                };
              });
      }).catch((error) => {
        console.error('Error:', error);
      });
  },

  // Got To cart location
  onInfoButtonClick: function (evt) { 
    var link = this.movieInfo[this.currentID].itemSite
    windowObjectReference = window.open(link, "_self");
  },

  // check if menu item is in 'raycaster?' intersection points... if so, do not remove. 
  // check if button was selected and if so add to cart
  onBackgroundClick: function (evt) {
    this.backgroundEl.object3D.scale.set(0.001, 0.001, 0.001);
    this.el.object3D.scale.set(0.001, 0.001, 0.001);
    this.el.object3D.visible = false;
    this.fadeBackgroundEl.object3D.visible = false;
    //this.portal.object3D.visible = true;
    //this.viewCartButton.object3D.visible = true;
    //this.storeLogoButton.object3D.visible = true;

    var buttonEls = document.querySelectorAll('.menu-button');
    for (var i = 0; i < buttonEls.length; ++i) {
      buttonEls[i].object3D.visible = true;
    }
  }
});
	
</script>

<a-scene
	vr-mode-ui="enable: false"
    background="color: #212"
    cursor="rayOrigin: mouse; fuse: false" raycaster="objects: .raycastable">
      <a-assets>
        <img id="sceneImage" src="{{ section.settings.img360 | img_url: '4096x2048' }}" crossorigin="anonymous"/>
        {% for block in section.blocks %}
              <img id="{{ block.settings.vr_product | replace: ' ', '-' | camelcase }}" src="{{ block.settings.display_image | img_url: 'medium' }}" crossorigin="anonymous"></img>
              <a-mixin id="{{ 'ring ' | append: block.settings.vr_product | replace: ' ', '-' | camelcase }}" geometry="primitive: ring; radiusInner: 0.265; radiusOuter: 0.3" material="color: {{ section.settings.main_color }}; shader: flat;" animation__scale="property: scale; to: 1.2 1.2 1.2; dur: 200; startEvents: mouseenter" animation__scale_reverse="property: scale; to: 1 1 1; dur: 200; startEvents: mouseleave"></a-mixin>
              <a-mixin id="{{ 'movie Image ' | append: block.settings.vr_product | replace: ' ', '-' | camelcase }}" geometry="primitive: plane; width: 0.6075; height: 0.81" material="shader: flat; transparent: true" position="0 0.495 0.002"></a-mixin>
        {% endfor %}
      </a-assets>
  
	  <a-sky material="src: #sceneImage" rotation="0 -90 0"></a-sky>
      <a-entity class="raycastable" id="background" position="0 0 0" geometry="primitive: sphere; radius: 2.0" material="color: red; side: back; shader: flat" scale="0.001 0.001 0.001" visible="false"></a-entity>
      <a-entity position="0 1.6 0" camera rotation="50 0 0" look-controls="magicWindowTrackingEnabled: true; touchEnabled: true; mouseEnabled: true">
        <a-entity id="fadeBackground" geometry="primitive: sphere; radius: 3;" material="color: black; side: back; shader: flat; transparent: true; opacity: 0.6; alphatTest: 0.5; " visible="false"></a-entity>
        <a-entity class="raycastable" id="infoPanel" position="0 -0.25 -2" info-panel="cartLink: http://www.aframe.io/; storeLink: http://www.aframe.io/;" scale="0.001, 0.001, 0.001" visible="false" geometry="primitive: plane; width: 1.5; height: 2.3;" material="color: white; shader: flat; alphaTest: 0.5; transparent: false;">
          {% for block in section.blocks %}
				<a-entity id="{{ block.settings.vr_product | append: ' Movie Image ' | replace: ' ', '-' |  camelcase }}" mixin="{{ 'movie Image ' | append: block.settings.vr_product | replace: ' ', '-' | camelcase }}" material="{{ block.settings.vr_product | replace: ' ', '-' | camelcase | prepend: 'src: #' }}" visible="false"></a-entity>
          {% endfor %}
          <a-entity id="movieTitle" position="0 -0.1 0" text="shader: msdf; align: center; width: 1; wrapCount: 24; font: roboto; color: black; value: RaymondReserveSelectionMerlo;"></a-entity>
          <a-entity id="movieDescription" position="0 -0.22 0" text="baseline: top; shader: msdf; width: 0.9; wrapCount: 32; font: roboto; color: black; value: Opening with enticing aromas of roasted coffee, vanilla bean and black cherry, this is a structured and bold Merlot. A plush entry of cocoa, dried red fruit flavors and a touch of spice lead to a savory midpalate. This wine h...;"></a-entity>
          <a-entity class="raycastable add-to-cart-button" id="addToCartButton" position="0 -0.245 1" geometry="primitive: plane; width: 0.5; height: 0.1;" material="color: {{ section.settings.main_color }}; shader: flat; transparent: false;" animation__scale="property: scale; to: 1.2 1.2 1.2; dur: 200; startEvents: mouseenter" animation__scale_reverse="property: scale; to: 1 1 1; dur: 200; startEvents: mouseleave">
            <a-entity text="align: center; color: white; value: Add To Cart;"></a-entity>
          </a-entity>
          <a-entity class="raycastable more-info-button" id="moreInfoButton" position="0 -.375 1" geometry="primitive: plane; width: 0.5; height: 0.1;" material="color: {{ section.settings.main_color }}; shader: flat; transparent: false;" animation__scale="property: scale; to: 1.2 1.2 1.2; dur: 200; startEvents: mouseenter" animation__scale_reverse="property: scale; to: 1 1 1; dur: 200; startEvents: mouseleave">
            <a-entity text="align: center; color: white; value: More Info;"></a-entity>
          </a-entity>
          <a-entity class="item-added-icon" position="0 0.375 0.9" geometry="primitive: plane; width: 0.75; height: 0.5;" material="color: {{ section.settings.main_color }}; shader: flat; transparent: false;" visible="false">
            <a-entity text="align: center; width: .8; wrapCount: 12; color: white; value: Item Added;"></a-entity>
          </a-entity>
        </a-entity>
      </a-entity>

      <!-- Hand controls -->
      <a-entity id="leftHand" laser-controls="hand: left" raycaster="objects: .raycastable"></a-entity>
      <a-entity id="rightHand" laser-controls="hand: right" raycaster="objects: .raycastable" line="color: #118A7E"></a-entity>

      <!-- Poster menu -->
      <a-entity id="menu">
        {% for block in section.blocks %}
        {% assign vr_item_id  = block.settings.vr_product | replace: ' ', '-' | camelcase  %} 
        <a-entity class="raycastable menu-button" id="{{ vr_item_id |  append: 'Button' }}"
                  rotation="{{ "0 " | append: block.settings.item_rotation_y | append: " 0" }}" 
                  position="{{ block.settings.item_cooridinates_x | append: " " | append: block.settings.item_cooridinates_y | append: " " | append: block.settings.item_cooridinates_z }}" 
                  mixin="{{ 'Ring ' | append: block.settings.vr_product | replace: ' ', '-' | camelcase }}" 
                  visible="true">
          <a-entity class="raycastable" geometry="primitive: ring; radiusInner: 0.001; radiusOuter: 0.3" visible="false"></a-entity>
        </a-entity>
        {% endfor %}
      </a-entity>
</a-scene>  

{% schema %}
  {
    "name": "VR-Display",
    "settings": [
      {
        "type": "image_picker",
        "id": "img360",
        "label": "Equirectangular Image For Scene"
      },
	 {
        "type": "color",
        "id": "main_color",
        "label": "Main color for scene",
        "default": "#548844",
        "info": "main scene color"
      }],
    "blocks": [
      {
        "type": "product_info",
        "name": "Product Info",
        "settings": [
          {
            "id": "vr_product",
            "type": "product",
            "label": "Select Product To Display in Scene"
          },
		  {
			"id": "item_card_title",
            "type": "text",
            "label": "title to display for product card",
            "default": "PLACEHOLDER TITLE" 
		  },
          {
  			"id": "item_card_description",
            "type": "text",
            "label": "descriptin to display for product card",
            "default": "PLACEHOLDER DESCRIPTION" 
          },
		  {
			"id": "item_cooridinates_x",
            "type": "text",
            "label": "x location in 3D space for item",
            "default": "0" 
		  },
		  {
			"id": "item_cooridinates_y",
            "type": "text",
            "label": "y location in 3D space for item",
            "default": "1.1" 
		  },
		  {
			"id": "item_cooridinates_z",
            "type": "text",
            "label": "z location in 3D space for item",
            "default": "-1.6" 
		  },
          {
            "type": "text",
            "id": "item_rotation_y",
            "label": "rotation (0-360) of item",
			"default": "0"
          },
          {
            "type": "image_picker",
            "id": "display_image",
            "label": "image for item card"
          }
        ]
      }
    ]
  }	
{% endschema %}
